ECMAScript

  - ECMAScript es el nombre del estandar internacional que define JavaScript.
  - Definido por u comite tecnico (TC-39) de ecma international.
  - Identificado como 'Ecma-262' y ISO/IEC 16262.
  - No es parte de la W3C.

  1 - 1997: Primera edicion.
  2 - 1998: Cambios editorales para mantener la especificacion completa alineada con el estandar internacional ISO/IEC 16262.
  3 - 1999: Se agregaron expresiones regulares, mejor manejo de strings, nuevo control de declaraciones, manejo de excepciones con try/catch, definicion más estricat de errores, formato para la salida numerica y ortras mejoras.
  4 - Abandonado: La cuarta edicion fue abandonada debido a direfencias politicas respecto a la complejidad del lenguaje. Muchas caracteristicas propuestas para la cuarta edicion fueron completamente abandonadas; algunas fueron propuestas para ala edicion ECMAScript Harmony.
  5 - 2009: Agrega el modo estricto 'strict mode', un subconjunto destinado a propporcionar una mejor comprobacion de errores. Aclara varias ambiguedades de la tercera edicion, y afina el comportamiento de las implementaciones del "mundo real" que difieren consistentemente desde esa especificacion. Agrega algunas nuevas caracteristicas, como getters y setters, libreria para el soporte JSON, y una más completa reflexion sobre propriedades de los objetos.
  5.1 - 2011: Esta completamente alineada con la tercera edicion del estandar internacional ISO/IEC 16262:2011.
    A partir del 2015 las actualizaciones son continuas teniendo una version anual.
  6 - 2015: ES2015 aka ES6.
  7 - 2016: ES2016 aka ES7.
  8 - 2017: ES2017 aka ES8.
  9 - 2018: ES2018 aka ES9.
  10 - 2019: ES2019 aka ES10.
  ESNext - 2020: A partir del 2020 las nuevas actualizaciones al estandae simplemente se bautizaran como ESNext.


==================================== BABEL ====================================
  Es un compilador de JavaScript, te permite usar el JavaScript del futuro, HOY.

  - Instalacion de paquetes:
    npm install -D babel-cli babel-core babel-preset-env

  - Crear el archivo de configuracion .babelrc
    {
      "presets: ["env"],
      "plugins": []
    }

  - Crear el script necesario para compilar ES con Babel en el archivo .package.json:
    {
      "name": "taller-es",
      "version": "1.0.0",
      "description": "Aprendiendo ECMAScript",
      "main": "index.js",
      "scripts": {
        "es6": "babel src --watch --out-dir dist"
        },
      "devDependencies": {
        "babel-cli": "^6.24.1",
        "babel-core": "^6.25.0",
        "babel-preset-env": "^1.6.0"
        }
    }

  - Ejecutar el script en la terminal:
    npm run es6


==================================== Variables y Constantes ====================================

  - Variables de bloque
    En ES se agrega una nueva forma de dividir variables usando la palabra let,
    se diferencia de var en el que el scope de una variable definida con let es,
    el bloque en el cual se encuentras la variable y no la funcion.

      let x = 'Hola kenai';
      if(true) {
        let x = 'Hola Jon';
        console.log(x); // Imrime en consola 'Hola Jon'
      }
      console.log(x); // Imrime en consola 'Hola Kenai'
      for (let i = 0; i < 5; i++) {
        console.log(i); // Imprime del 0 al 4
      }
      console.log(i); // Imprime Uncaught ReferenceError: i is not defined

  - Constantes
    Una constante es yn tipo 'INMUTABLE', NO puede cambiar una vez definida,
    se usa la palabra 'const' en lugar de var, al igual que let su scope es de bloque,
    son tipos de solo lectura y se le debe asignar un valor en el momento de su declaracion.
    Son referencian inmutables, pero sus valores no necesariamente.

      const DIEZ = 10;
      DIEZ = 5;
      console.log(DIEZ); // Imprime Uncaught TypeError: Assignment to constant variable

      const hola = 'hola mundo';
      hola = 'hola mundo'; // Imprima Uncaught TypeError: Assignment to constant variable

      const PI;
      PI = 3.1415926533589793; // Imprime Missing initializer in const declaration

      const obj = {};
      obj.prop ? 'x';
      console.log(obj); // Imprime { prop: 'x' }
      obj.prop = 'y';
      console.log(obj); // Imprime { prop: 'y' }

      const D = document;
      console.log(D); // Imprime el objeto documento
      console.log(D.documentElement); // Imprime el elemento <html>


==================================== Niveles de Bloques ====================================
  En ES5 los ambitos de declaracion (scope) estaban diseñados a nivel de funciones,
  con ES6 podemos declarar funciones a nivel de bloque.

  En ES6, como en muchos otros lenguajes de programacion, el bloque se define entre llaves
  y genera un nuevo scope(block scope).

    // Sin Bloques
    function f() { return 1 }
    console.log(f()); // Imprime 2

    functionf() { return 2 }
    console.log(f()); // Imprime 2

    // Con bloques
    function f() { return 1 }
    {
      console.log(f()); // Imprime 2
      FUNCTION F() { return 2 }
      console.log(f()); // iMPRIME 2
    }
    console.log(f()); // Imprime 1


==================================== Plantillas de Cadenas ====================================
      
      Los 'template string' son una forma más facil de crear:
        - Cadenas con variables dentro (interpolacion).
        - Generar cadenas multilinea.
        - Ejecutar expresiones, funciones y etiquetados.

      let saludo = `Hola soy un Template String`;
      console.log(saludo); // Imprime Hola soy un Template string

      // strings multilinea
      let mensaje = `No es quien seas en el interior,
      tus actos son los que te definen...
      Batman`;
      conosle.log(mensaje); 
      /*
      Imprime
      No es quien seas en el interior,
      tus actos son los que te definen...
      Batman
      */

      // variables en strings (interpolacion)
      let nombre = 'Jonathan';
      console.log(`Hola ${nombre}`); // Imprime Hola Jonathan

      // ejecutar expresiones
      console.log(`Hola ${nombre}, tienes ${30 + 2} años`); // Print Hola Jonathan, tienes 32 años.

      // ejecutar funciones
      let estaciones = [Primavera`, `Verano`, Òtoño`, Ìnvierno`],
      ol = `<ol>
        ${
          estaciones.map(function (estacion) {
            return `<li>${estacion}</li>`;
          }).join('');
        }
        </ol>`;

      console.log(ol); // Imprime <ol><li>Primavera</li><li>Verano</li><li>Otoño</li><li>Invierno</li></ol>


==================================== Funciones Flechas ====================================
  Es una nueva forma de definir funciones, hay distintas variantes en la sintaxis:

  -- Funcion de un solo parametro --
  Al crear una arrow function de un solo para,etro no es necesario escribir las parentesis,
  tampoco es necesario escribir las claves, esto se puede cuando la funcion es de una sola
  linea y devuelve un valor.

    let saludo = nombre => `Hola ${nombre}`;

  -- Funcion de varios parametros --
  Cuando la funcion tenga más de un parametro es necesario envolver el nombre de estos estre parentesis.

    let sumar = (a, b) => a + b;

  -- Funcion sin parametros --
  Cuando la funcion no reciba parametros, tambien son necesarios los parentesis.

    let saludo () => `Hola a todos`;

  -- Funcion con cuerpo --
  Cuando la funcion tiene mas de una linea (o no devuleve ningun valor) es necesario utilizar las llaves.

    let fecha = new Datw(),
        hora = fecha.getHours();
    
    let saludo = (hr) => {
      if(hr <= 5) {
        return 'No me jodas!!!';
      } else if(hr >=6 && hr <= 11) {
        return 'Buenos dias!!!';
      } else if(hr >=12 && hr <= 18) {
        return 'Buenas tardes!!!';
      } else {
        return 'Buenas Noches!!!';
      }
    };

  -- Funcion sin cuerpo --
  Cuando la funcion posee una sola linea, retorna esa linea de forma implicita.

    let line = () => `Hola Mundo`;


==================================== Contexto Lexico de this ====================================
  Las arrow function tiene la capacidad de capturar el objeto this del contexto
  donde la arrow se ejecuta y asi utilizarlo dentro de su bloque de sentencias.

  // El proble de 'this' actualizacione
  function Persona(nombre) {
    // El constructor de Presona() define 'this' como una instancia de el mismo
    this.nombre = nombre;
    this.edad= 0;

    setInterval(function() {
      // La funcion anonima define 'this' como una instancia de ella misma
      this.edad++;
    }, 1000);
  }
  var jon = new Persona('Jonathan');
  console.log(jon); // Imprime la edad en 0 por cada segundo que pasa

  // La solucion del problema 'this' antes
  function Persona(nombre) {
    // Se declara una variable self (algunos prefieren that) para guardar el 'this' del constructor Persona()
    var self = this;

    self.nombre = nombre;
    self.edad = 0;

    setInterval(function() {
      // La funcion anonima define su propio 'this' pero el valor que aumenta es edad del 'this' de Persona()
      self.edad++;
    }, 1000);
    }

    var jon = new Persona('Jonatan');
    console.log(jon); / Imprime el valor de edad mas uno por cada segundo que pasa

  // La solucion para el problema de 'this' ahora
  function Persona(nombre) {
    // El constructor de Persona() define 'this' como una instancia de el mismo
    thsi.nombre = nombre;
    this.edad = 0;

    setinterval(() => { this.edad++ }, 1000);
  }

  const jon = newPersona('Jonathan');
  console.log(jon); // Imprime el valor de edad mas uno por cada segundo que pasa
  console.log(jon.edad); // Imprime la edad


==================================== Objetos Literales ====================================
    
    -- Atajos en la esritura de atributos y metodos:
    // Antes
    var nombre = 'kEnai', edad = 4;
    var peroo = {
      nombre: nombre,
      edad: edad,
      ladrar: function() {
        alert('guau guau!!!');
      }
    }
    console.log(pero); // Imprime Object {nomre: "kEnai", edad: 4}
    perro.ladrar(); // Manda alerta

    // Ahora
    let nombre = 'kEnai', edad = 4;
    const perro = {
      nombre,
      edad,
      ladrar() { alet 'guau guau!!!'}
    }
    console.log(perro); // Imprime Object {nomre: "kEnai, edad: 4}
    perro.ladrar(); // Manda alerta

    -- Nombres de atributos y metodos calculados (o computados):
    let nombreAtributo = 'nombre', nombreOtroAtributo = 'ad', nombreMetodo = 'ladrar';

    const perro = {
      [nombreAtributo]: 'kEnai',
      [`ed${nombreOtroAtributo}`]: 4,
      [nomnbreMetodo]() {
        alert('guau guau!!!');
      }
    }
    console.log(perro); // Imprime Object {nombre: "kEnai", edad: 4}
    perro.ladrar(); // Manda alerta


==================================== Destructuracion ====================================
  Nuevas formas de asignar valores a Arreglos y Objetos.

  -- Destructuracion de Arreglos --
  let numeros = [1,2,3];

  // sin Destructuracion
  let uno = numeros[0], dos = numeros[1], tres = numeros[2];

  console.log(numeros, uno, dos, tres); // Imprime [1, 2, 3] 1 2 3  

  // con destructuracion
  let [one, two, three] = numeros;

  console.log(numeros, one, two, three): // imprime [1, 2, 3] 1 2 3

  -- Destructuracion de Objetos --
  let persona = {nombre: 'Jonathan', apellido: 'Salchichon'};
  let {nombre, apellido} = persona;

  console.log(persona); / Imprime Object {nombre: "Jonathan", apellido: "Salchichon}
  console.log(nombre); // Imprime Jonathan
  console.log(apellido); // Imprime Salchichon

  let datos = {correo: 'jonisalchichon@hotmail.com', telefono: 00001000001};
  let {correo: email, telefono: phone} = datos;

  console.log(datos): // Imprime Object {correo: "jonisalchichichon@hotmail.com", telefono: 00001000001}
  console.log(email): // Imprime jonisalchichon @hotmail.com
  console.log(phone); // Imprime 00001000001


==================================== Parametros por defecto ====================================
  Ahora es completamente posible definir un valor por defecto a los parametros
  de nuestras funciones al igual que en otros lenguajes de programacion.

  // Antes
  function pais(nombre) {
    nombre = nombre || 'Terrestre';
    console.log(nombre);
  }

  pais(); // Imprime Terrestre
  pasi('Mexico'); // Imprime Mexico

  // Ahora
  function pis(nombre = 'Terrestre') {
    console.log(nombre);
  }

  pais(); // Imprime Terrestre
  pais('Mexico); // Imprime Mexico


==================================== Parametro Rest ====================================
  Los parametros 'Rest' son una forma de utilizar parametros virtualmente infinitos,
  se definen agregando ... adelante del nombre del parametro rest, este tiene que ser
  siempre el ultimo parametro de la funcion.

  function sumar(a, b, ...c) {
    let resultado = a + b;
    c.foreach( n => resultado +=n );
    return console.log(resultado);
  }

  sumar(1, 2); // Imprime 3
  sumar(1, 2, 3); // Imprime 6
  sumar(1, 2, 3, 4); // Imprime 10
  suamr(1, 2, 3, 4, 5); // Imprime 15


==================================== Operador de Propagacion Spread ====================================
  Permite que una expresion sea expandida en situaciones donde se esperan multiples
  argumentos o elementos

    let arr1 = [1, 2, 3, 4], arr2 = [5, 6, 7];
    console.log(arr1); // Imprime [1, 2, 3, 4]
    console.log(...arr1); // Imprime 1 2 3 4

    arr1.push(...ar2);
    console.log(arr1); // Imprime [1, 2, 3, 4, 5, 6, 7]

    let superiores = ['hombros', 'brazos', 'tronco'],
        inferiores = ['pelvis', 'piernas', 'rodilla'],
        cuerpo = ['cabeza', ...superioes, ...inferiores, 'pies'];

    console.log(cuerpo); // Imprime ['cabeza', 'hombros', 'brazos', 'tronco', 'pelvis', 'pierna', 'rodilla', 'pies']
    console.log(...cuerpo) // imprime cabeza hombros brazos tronco pelvis piernas rodillas pies


==================================== Clases ====================================
  En Es se incorpora al lenguaje 'clases' para poder hacer Programacion Orientada a Objetos
  mas facilmente (sin prototipos), soportan herencia, polimorfismo, superclases, instancias,
  metodos estaticos, constructores, setters y getters.

  -- Definicion de clase, constructor e instancia de objetos:

    class Animal {
      // el constructor es un metodo especial que se ejecuta en el momento de instanciar la clase
      constructor(nombre, edad,genero) {
        this.nombre = nombre;
        this.edad = edad;
        this.genero = genero;
      }

      // metodos publicos de la clase
      comunicar() {
        console.log('Me comunico con sonidos');
      }

      comer() {
        console.log('Ingiero alimentos');
      }

      respirar() {
        console.log('Respiro oxigeno);
      }

      reproducir() {
        console.log('Mereprodusco sexualmente');
      }
    }

    let lucy = new Animal('Lucy', 20, 'Hembra');
    console.log(lucy); // Imprime Animal {nombre: 'Lucy', edad: 20, genero: 'Hembra'}
    lucy.comunicar(); // Imprime Me comunico con sonidos
    lucy.comer(); // ImprimeIngiero alimentos
    lucy.respirar(); // Imprime Respiro oxigeno
    lucy.reproducir(); // Imprime Me reprodusco sexualmente

  -- Herencia, polimorfismo, metodos estaticos, setters y getters:

    // con la palabra extends la clase Humano hereda de Animal
    class humano extends Animal {
      // el constructor es un metodo especial que se ejecuta en el momento de instanciar la clase
      constructor(nombre, edad, genero) {
        // con el emtodo super() se manda a llamar el constructor de ola clase padre
        super(nombre, edad, genero);
        this.razonar = true;
        this._nacionalidad = 'Terrestre';
      }

      // un metodo estatico se puede ejecutar sin necesidad de instanciar la clase
      static saludar() {
        console.log('Hola soy un Humano');
      }

      // los setter y getters son metodos especiales que nos permiten establecer y obtener los valores de atributos de nuestra clase
      set nacionalidad(pais) {
        this.nacionalidad = pais;
      }

      get nacionalidad() {
        return this._nacionalidad;
      }

      // metodos publicos de la clase redefinidos gracias al polimorfismo
      comunicar() {
        console.log('Me comunico hablando');
      }

      comer() {
        console.log('Como de todo, soy omnivoro');
      }

      respirar() {
        console.log('Respiro oxigeno con ayuda de mis pulmones');
      }

      reproducir() {
        cosole.log('Me reprodusco sexualmente, soy mamifero y viviparo');
      }

      pensar() {
        console.log('Pienso porque tengo intelecto');
      }
    }

    Humano.saludar(); // Hola soy un Humano
    let jon = new Humano('Jonathan', 32, 'Macho');
    console.log(jon);  // Imprime Humano {nombre: 'Jonathan', edad: 32, genero: 'Macho', razonar: true, _nacionalidad: 'Terrestre'}}
    jon.comunicar(); //Imprime Me comunico hablando
    jon.comer(); //Imprime Como de todo, soy omnívoro
    jon.respirar(); //Imprime Respiro oxígeno con ayuda de mis pulmones
    jon.reproducir(); //Imprime Me reproduzco sexualmente, soy mamífero y vivíparo
    jon.pensar(); //Imprime Pienso por que tengo intelecto
    // setter
    jon.nacionalidad = 'Mexico';
    console.log(jon.nacionalidad); // Imprime Mexico1
    console.log(jon); //Imprime Humano {nombre: "Jonathan", edad: 32, genero: "Macho", razonar: true, _nacionalidad: "México"}


==================================== Modulos ====================================
  Antes de ES6, utilizamos bibliotecas como 'Browserify' para crear modulos en el lado del
  cliente(navegadores), y require en el servidor (Node.js).
  Con ES6, ahora podemos utilizar directamente modulos de todos los tipos (AMD, CommonJS y ECMAScript).

  ==================================== exports / import CommonJS ====================================

  -- 'Exportando' en formato CommonJS --
      module.exports = 1;
      module.exports = [ foo: 'b'];
      module.exports = function bar () {};

  -- 'Importando' en formato CommonJS --
    // considerando que existe una carpeta libs y dentro un archivo llamado:
    'rutas' con extencion .js o .jon

    const rutas = require('./libs/rutas');

    ==================================== exports - import ECMAScript ================================

  -- Exportando en formato ECMAScript --
    Por nombres:
      export let nombre = 'Jonathan';
      export let edad = 33;

    Por listas de objetos:
      function sumar(a, b) {
        return a - b;
      }

      function restar(a, b) {
        return a - b;
      }

      export { sumar, restar };

    Usando import individualmente:
      export function sumar(a, b) {
        return a + b;
      }

    Usando default:
      function sumar (a, b) {
        return a + b;
      }

      function restar (a, b) {
        return a - b;
      }

      let operaciones = {
        sumar,
        restar
      }

      export default operacions;

      // otra forma
      export default {operaciones as default };

      * Mejores Practicas: Utiliza siempre el metodo export default al final
      de los modulos ECMAScript, esto dejara claro lo que se esta exportando
      y lo que no. En los modulos CommonJS suele exportarse un solo valor u objeto.
      Siguiendo con este paradigma, hacemos que nuestro codigo sea mas facil,
      legible y que podamos combinar entre modulos CommonJS y ECMAScript.

  
  -- Importando en ECMAScript --
    Archivo completo:
      import 'react';
      import './libs/operaciones';

    Por nombre de la importaciones:
      import React from 'react';
      import { sumar, restar } from './libs/operaciones';

    Tambien se pueden renombrar las importaciones:
      import {
        sumar  as mas,
        restar as menos
      } from './libs/operaciones';
      
    Importacion por espacios de nombres:
      import * as aritmatica from './libs/operaciones';

    Importar una lista de valores de un modulo:
      import * as aritmetica from './libs/operaciones';
      const  { sumar, restar } = aritmatica;

    Al importar un moculo exportado usando la sintaxis CommonJS (como React) podemos hacer lo siguiente:
      import React from 'react';
      const { Component, PropTypes } = React;
    Simplificado:
      import React, { Component, PropTypes } from 'react';

      * Nota: Los valores que se exportan son 'enlaces', no
      referencias. Por lo tanto, cambiar el enlace de una variable
      en un modulo, afectara su valor. Evita cambiar la interfaz
      publica de modulos exportados.

==================================== Promesas ====================================
  Es una amnera alternativa a las callbacks paramodelar asincronia.

  - Construcion explicita del flujo de ejecucion.
  - Separacion en bloques consecutivos
  - Manejo de errores mas controlado.
  - Combinacionde diferentes flojos asincronos.

  -- Promesas en el navegador --

    function adivinarNumero() {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          let n = Math.floor(Math.random() * 10);

          return (n >= 1 && n <= 5)
                  ? resove(`Adivinaste el numero: ${n}`)
                  : reject(new Error(`No adivinaste el numero: ${n}`));
        }, 1000);
      })
    }

    adivinarNumero()
      .then( num => console.log(num))
      .catch( error => console.log(error ));

  -- Promesas en el servidor --

    const fs = require('fs'),
      file = './nombres.txt',
      newFile = './nombres_promises_es6.txt';

    let promise = new Promise((resolve, reject) => {
      fs.acess(file, fs.F_OK, (err) => {
        return (err)
          ? reject(new Error('El archivo no existe'))
          :resolve(true);
      });
    });

    promise
      .then((dataPromise) => {
        console.log('El archivo existe');

        return new Promise((resolve, reject) => {
          fs.readFile(file, (err, data) => {
            returnn (err)
              ? reject( new Error('El archvo no su pudo leer'))
              : resolve(data);
          });
        });
      })
      .then((dataPromise) => {
        console.log('El archivo se ha leido exitosamente');

        return new Promise((resolve, reject) => {
          fs.writeFile(newFile, dataPromise, (err) => {
            return (err)
              ? reject( new Error('El archvo no su pudo copiar'))
              : resolve('El archvo se ha copiado con exito);
          });
        });
      })
      .then((dataPromise) => { console.log(dataPromise);})
      .catch((err) => { console.log(err.message); });


==================================== Iteradores ====================================
  Un iterador es un mecanismo que tiene los lenguajes de programacion para
  recorrer secuencialmente distintas estructuras de datos.

  Para que un objeto sea iterable en JavaScript es necesario que:

    - Implemente el tipo symbol.iterator.
    - Implemente la funcion next que devuelve un objeto con dos valores:
      1. 'done' que indica si ha terminado de iterar y
      2. 'value' que devuelve el valor actual.

  console.log(typeof String.prototype.[Symbol.iterator]); // Imprime function
  console.log(typeof Array.prototype.[Symbol.iterator]); // imprime function
  console.log(typpeof Map.prototype[Symbol.iterator]); // imprime function
  console.log(typeof Set.prototype[Symbol.iterator]); // imprime function
  console.log(typeof Object.prototype[Symbol.iterator]); // imprime undefined

  Recorriendo iteradores con el bucle for...of, que permite recorrer objetos literales:

  // Antes
  var anArray = ['Hola', 1, true, {}],
    aString = 'Hola soy iterable';

  for (var i = 0; i < anArray.length; i++) {
    console.log(anArray[i]);
  }
  for(var i = 0; i < aString.length; i++) {
    console.log(aString[i]);
  }

  // Ahora
  let anArray = ['Hola', 1, true, {}],
    aString = 'Hola soy iterable';

  for(let item of anArray) {
    console.log(item); // Imprime cada elemento del arreglo
  }

  for(let item of anArray) {
    console.log(itemm); // Imprime cada caracter de la casdena de texto
  }


==================================== Simbolos ====================================
  Un Simbolo es un tipo de datos unico e inmutable, puede ser utilizado como un
  identificador para las propriedades de los objetos.

  Son utiles cuando queremos agregar metodos o atributos propios a objetos nativos 
  del lenguaje o a los de alguna libreria de terceros para evitar que, si existiese 
  algun metodo o atributo con el nombre del que queremos crear evitar que el original
  se sobre escriba con esto se evita 'antipatron'.

  Cuando se recorran las propriedades de un objeto, las que sean definidas como simbolo
  no apareceran.

  Recorriendo los elemenmtos de un Objeto:

    let anObject = {
      name: 'Jonatan',
      age: 36,
      email: 'jonsalcicon@gmail.com'
    },
      // un Simbolo se instancia sin new, porque no es un objeto y por tal no tiene constructor
      email = Symbol('email');

    // Asignacion de un simbolo en un objecto
    anObject[email] = 'hola@jonsalchichon.com';

    for(let item of anObject) {
      console.log(item); // Ungaught TypeError: anObject[Symbol.iterator] is not a function
    }

    for(let item in anObject) {
      console.log(item); // Imprime name, age, email
    }

    console.log(Object.keys(anObject)); // Imprime ["name", "age", "email"]
    cojnsole.log(Object.getOwnPropertyNames(anObject)); // Imprime ["name", "age", "email]
    console.log(Object.getOwnPropertySymbols(anObject)); // Imprime [Symbol(email)]

    console.log(
      anObject, // Imprime Object { name: "Jonathan", age: 36, email: "jonsalchichon@gmail.com", Symbol(email): "hola@jonsalchichon.com" }
      anObject.name, // Imprime "Jonathan"
      anObject.age // Imprime 36
      anObject.email, // Imprime "jonsalchichon@gmail.com"
      anObject[email], // Imprime "hola@jonsalchichon.com"
    );

  Conviertiendo un Objeto en iterable:

    let iterable = {
      0: 'Jonathan",
      1: 36,
      2: 'jonsalchichon@gmail.com',
      length: 3,
      [Symbol.iterator]: Array.prototype[Symbol.iterator]
    }
    
    for (let item of iterable) {
      console.log(item) // Imprime Jonathan, 36, jonsalchichon@gmail.com
    }


==================================== Generadores ====================================
  Los generadores son un tipo especial de funcion que devuelven un valor y permite luego
  volver a entar en la funcion en el mismo lugar en que se quedo, al tiempo que conserva
  el contexto de ejecucion.

  Son funciones que pueden ser pausadas y resumidas cuando llamamos a la funcion generador,
  no ejecuta el cuerpo de la funcion, sino que devuelve un objeto generador. El generador
  implementa una funcion que le proporciona un metodo next(), que ejecutara el cuerpo de la
  funcion hasta encontrar un 'yield'. En este punto, se detendra.

  El secreto del generador radica justamente en la palabra clave 'yield', que es un tipo especial
  de return que, en lugar de devolvernos un solo valor y salirse de la funcion, entrara nuevamente
  en esta y continuara ejecutandola hasta que se acabe o encuentre otra clausula 'yield'.

  Para que una funcion se considere generador debe declararse anteponiendo un asterisco function*.

  Para obtener los resultados del generador lo hacemos con el metodo next() que devuelve un objeto de tipo:

    {
      value: el valor retonado por yield
      done: indica si ah finalizado o no la ejecucion del cuerpo de la funcion
    }

  Los generadores, al implementar .next(), son iterables y suelen ser una forma mas sencilla de escribir un iterador.

    function* generador(nombre) {
      yield `Hola ${nombre}`;
      yield 'Esta linea saldra en la segunda ejecucion';
      yield 'Esta otra, en la tercera';
      if( nombre === 'Jonathan' ) {
        yiel 'Esta otra, saldra en la cuarta linea si te llamas, Jonathan';
      }
    }

    let gen = generador('Jonatahn');
    console.log( gen.next() ); // Imprime Object {value: "Hola Jonathan", done: false}
    console.log( gen.next().value ); // Imprime Esla linea saldra en la segunda ejecucion
    console.log ( gen.next().value ); // Imprime Esla otra, en la tercera
    console.log( gen.neext().value ); // ImprimeEsta otra, saldra en la cuarta solo si te llamas Jonathan
    console.log( gen.next() ); // Imprime Object {value: uhndefined, done: true}

  Mas ejemplos con Generadores:

    class LoremImpsum {
      constructor(text) {
        thsi.text = text;
      }

      *words() {
        const rgx = /\S+/g;
        let match;

        while(match = rgx.exec(this.text)) {
          yield match[0];
        }
      }
    }

    const lorem = new LoremImpsum('Lorem ipsum dolor sit amet, consectetur adipis');

    for(let word of lorem.words()) {
      console.log( word );
    }

    ====================================
    class Usuarios {
      constructor(user) {
        this.user = user;
      }

      *alias() {
        for(let persona of this.user) {
          yield ( persona.sexo === "H') ? `Sr. ${persona.nombre`} : `Sra. ${persona.nombre`};
        }
      }
    }

    const gente = new Usuarios(
      [{sexo: 'H', nombre: 'Jon'}, {sexo: 'M', nombre: 'Mercedes'}]
    )

    for(let persona of gente.alias()) {
      console.log(perona);
    }


==================================== Proxies ====================================
  Los 'poxies' proporcionan una API para capturar o interceptar cualquier
  operacion realizada sobre un objeto y para modificar como se comporta
  ese objeto. Son utiles para:

    - Intercepcion.
    - Virtualizacion de objetos.
    - Gestion de recursos.
    - Hcer profiling y generar logs durante la depuracion de una aplicacion.
    - Seguridad y control de acceso.
    - Definicion de 'contratos' al esar objetos.

  La API Proxy define un constructor al que se le pasa como primer argumento el
  objeto que se a capturar llamado target y como segundo argumento el handler que realizara la captura. Ejemplo:

    let target = { /* propriedades y metodos */ },
        handler { /* funciones capturadores */ },
        proxy = new Proxy(target, handler);

  El handler es el encargado de modificar el comportamiento original del objeto target.
  Este handler contiene metodos "capturadores" (por ejemplo .get(), .set(), .apply()) que se
  ejecutan al realizar la llamada correspondiente del proxy.

    const persona = new Proxy(
      {},
      { set(obj, prop, val) { 
          if(prop === 'edad' && (!Number.isInteger(val) || val < 0)) {
            throw new Error(`Valor invalido para la propriedad ${prop}`)
          }
        }
        return obj[prop] = val;
      }
    );

    persona.edad = 33;
    console.log(persona.edad); // Imprime 33

    persona.edad = -10; // Imprime Error: VAlor invalido para propriedad edad


==================================== Reflexion ====================================
