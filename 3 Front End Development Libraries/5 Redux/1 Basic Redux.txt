// Redux
const ADD = 'ADD';
const addMessage = message => {
  return {
    type: ADD,
    message
  };
};
const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      // to enforce state immutability, return a new state object using Object.assign() method
      return [...state, action.message];
      break;
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);


// React
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  handleChange(event){
    this.setState({
      input: event.target.value,
      messages: this.state.messages
    })
  }

  submitMessage(){
    this.setState({
      input: '',
      messages: [...this.state.messages, this.state.input]
    })
  }

  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input onChange={this.handleChange.bind(this)} value={this.state.input}/>
        <button onClick={this.submitMessage.bind(this)}>Submit</button>
        <ul>
          {this.state.messages.map((x, i)=>{
            return <li key={i}>{x}</li>
          })}
        </ul>
      </div>
    );
  }
};

// Usa "Provider" para conectar Redux a React
const Provider = ReactRedux.Provider;

class AppWrapper extends React.Component {
  // Renderiza el Provider debajo de esta línea
  render() {
    return (<Provider store={store}>
      <DisplayMessages />
    </Provider>
    );

  };

  // Cambia el código encima de esta línea
};
